/*
 * FIWARE-NGSI v2 Specification
 * FIWARE-NGSI v2 Specification
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.interiot.fiware.ngsiv2.client.api;

import org.interiot.fiware.ngsiv2.client.ApiCallback;
import org.interiot.fiware.ngsiv2.client.ApiClient;
import org.interiot.fiware.ngsiv2.client.ApiException;
import org.interiot.fiware.ngsiv2.client.ApiResponse;
import org.interiot.fiware.ngsiv2.client.Configuration;
import org.interiot.fiware.ngsiv2.client.Pair;
import org.interiot.fiware.ngsiv2.client.ProgressRequestBody;
import org.interiot.fiware.ngsiv2.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import org.interiot.fiware.ngsiv2.client.model.Attributes;
import org.interiot.fiware.ngsiv2.client.model.Attribute;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttributesApi {
    private ApiClient apiClient;

    public AttributesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttributesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getAttributeData */
    private com.squareup.okhttp.Call getAttributeDataCall(String entityId, String attrName, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling getAttributeData(Async)");
        }
        
        // verify the required parameter 'attrName' is set
        if (attrName == null) {
            throw new ApiException("Missing the required parameter 'attrName' when calling getAttributeData(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/entities/{entityId}/attrs/{attrName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(entityId.toString()))
        .replaceAll("\\{" + "attrName" + "\\}", apiClient.escapeString(attrName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 20O OK. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity (required)
     * @param attrName Name of the attribute to be retrieved. (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @return Attributes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Attributes getAttributeData(String entityId, String attrName, String type) throws ApiException {
        ApiResponse<Attributes> resp = getAttributeDataWithHttpInfo(entityId, attrName, type);
        return resp.getData();
    }

    /**
     * 
     * Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 20O OK. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity (required)
     * @param attrName Name of the attribute to be retrieved. (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @return ApiResponse&lt;Attributes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Attributes> getAttributeDataWithHttpInfo(String entityId, String attrName, String type) throws ApiException {
        com.squareup.okhttp.Call call = getAttributeDataCall(entityId, attrName, type, null, null);
        Type localVarReturnType = new TypeToken<Attributes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 20O OK. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity (required)
     * @param attrName Name of the attribute to be retrieved. (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAttributeDataAsync(String entityId, String attrName, String type, final ApiCallback<Attributes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAttributeDataCall(entityId, attrName, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Attributes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeASingleAttribute */
    private com.squareup.okhttp.Call removeASingleAttributeCall(String entityId, String attrName, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling removeASingleAttribute(Async)");
        }
        
        // verify the required parameter 'attrName' is set
        if (attrName == null) {
            throw new ApiException("Missing the required parameter 'attrName' when calling removeASingleAttribute(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/entities/{entityId}/attrs/{attrName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(entityId.toString()))
        .replaceAll("\\{" + "attrName" + "\\}", apiClient.escapeString(attrName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity. (required)
     * @param attrName Attribute name. (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeASingleAttribute(String entityId, String attrName, String type) throws ApiException {
        removeASingleAttributeWithHttpInfo(entityId, attrName, type);
    }

    /**
     * 
     * Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity. (required)
     * @param attrName Attribute name. (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeASingleAttributeWithHttpInfo(String entityId, String attrName, String type) throws ApiException {
        com.squareup.okhttp.Call call = removeASingleAttributeCall(entityId, attrName, type, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity. (required)
     * @param attrName Attribute name. (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeASingleAttributeAsync(String entityId, String attrName, String type, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeASingleAttributeCall(entityId, attrName, type, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateAttributeData */
    private com.squareup.okhttp.Call updateAttributeDataCall(String entityId, String attrName, Attribute body, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling updateAttributeData(Async)");
        }
        
        // verify the required parameter 'attrName' is set
        if (attrName == null) {
            throw new ApiException("Missing the required parameter 'attrName' when calling updateAttributeData(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAttributeData(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/entities/{entityId}/attrs/{attrName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(entityId.toString()))
        .replaceAll("\\{" + "attrName" + "\\}", apiClient.escapeString(attrName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * The request payload is an object representing the new attribute data. Previous attribute data is replaced by the one in the request. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity to update (required)
     * @param attrName Attribute name (required)
     * @param body  (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAttributeData(String entityId, String attrName, Attribute body, String type) throws ApiException {
        updateAttributeDataWithHttpInfo(entityId, attrName, body, type);
    }

    /**
     * 
     * The request payload is an object representing the new attribute data. Previous attribute data is replaced by the one in the request. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity to update (required)
     * @param attrName Attribute name (required)
     * @param body  (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAttributeDataWithHttpInfo(String entityId, String attrName, Attribute body, String type) throws ApiException {
        com.squareup.okhttp.Call call = updateAttributeDataCall(entityId, attrName, body, type, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * The request payload is an object representing the new attribute data. Previous attribute data is replaced by the one in the request. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity to update (required)
     * @param attrName Attribute name (required)
     * @param body  (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAttributeDataAsync(String entityId, String attrName, Attribute body, String type, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAttributeDataCall(entityId, attrName, body, type, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
