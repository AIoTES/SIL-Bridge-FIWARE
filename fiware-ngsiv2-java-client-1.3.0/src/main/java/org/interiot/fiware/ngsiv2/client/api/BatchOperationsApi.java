/*
 * FIWARE-NGSI v2 Specification
 * FIWARE-NGSI v2 Specification
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.interiot.fiware.ngsiv2.client.api;

import org.interiot.fiware.ngsiv2.client.ApiCallback;
import org.interiot.fiware.ngsiv2.client.ApiClient;
import org.interiot.fiware.ngsiv2.client.ApiException;
import org.interiot.fiware.ngsiv2.client.ApiResponse;
import org.interiot.fiware.ngsiv2.client.Configuration;
import org.interiot.fiware.ngsiv2.client.Pair;
import org.interiot.fiware.ngsiv2.client.ProgressRequestBody;
import org.interiot.fiware.ngsiv2.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import org.interiot.fiware.ngsiv2.client.model.Discoverrequest;
import org.interiot.fiware.ngsiv2.client.model.Registration;
import org.interiot.fiware.ngsiv2.client.model.Queryrequest;
import org.interiot.fiware.ngsiv2.client.model.Queryresponse;
import org.interiot.fiware.ngsiv2.client.model.Registerrequest;
import org.interiot.fiware.ngsiv2.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BatchOperationsApi {
    private ApiClient apiClient;

    public BatchOperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BatchOperationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createDiscover */
    private com.squareup.okhttp.Call createDiscoverCall(Discoverrequest body, Double limit, Double offset, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDiscover(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/op/discover/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "options", options));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * The response payload is an Array that contains one object per matching registration. The registrations follow the JSON registration representation format (described in a section above). The payload may contain the following elements (all of them optional): + &#x60;entities&#x60;: a list of entites to search for. Each entity is represented by a JSON object with the   following elements:     + &#x60;id&#x60; or &#x60;idPattern&#x60;: Id or pattern of the affected entities. Both cannot be used at the same       time, but at least one of them must be present.     + &#x60;type&#x60; or &#x60;typePattern&#x60;: Type or type pattern of the entities to search for. Both cannot be used at       the same time. If omitted, it means \&quot;any entity type\&quot;. + &#x60;attributes&#x60;: a list of attribute names to search for. If omitted, it means \&quot;all attributes\&quot;. + &#x60;scopes&#x60;: a list of scopes to restrict the results of the query. Each scope is represented by a   JSON object with a &#x60;type&#x60; (a JSON string) and a &#x60;value&#x60; (whose type depends on the &#x60;type&#x60;   property). The different available scopes are described elsewhere. Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body  (required)
     * @param limit Limit the number of registrations to be retrieved. (optional)
     * @param offset Skip a number of registrations. (optional)
     * @param options Options dictionary. (optional)
     * @return List&lt;Registration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Registration> createDiscover(Discoverrequest body, Double limit, Double offset, String options) throws ApiException {
        ApiResponse<List<Registration>> resp = createDiscoverWithHttpInfo(body, limit, offset, options);
        return resp.getData();
    }

    /**
     * 
     * The response payload is an Array that contains one object per matching registration. The registrations follow the JSON registration representation format (described in a section above). The payload may contain the following elements (all of them optional): + &#x60;entities&#x60;: a list of entites to search for. Each entity is represented by a JSON object with the   following elements:     + &#x60;id&#x60; or &#x60;idPattern&#x60;: Id or pattern of the affected entities. Both cannot be used at the same       time, but at least one of them must be present.     + &#x60;type&#x60; or &#x60;typePattern&#x60;: Type or type pattern of the entities to search for. Both cannot be used at       the same time. If omitted, it means \&quot;any entity type\&quot;. + &#x60;attributes&#x60;: a list of attribute names to search for. If omitted, it means \&quot;all attributes\&quot;. + &#x60;scopes&#x60;: a list of scopes to restrict the results of the query. Each scope is represented by a   JSON object with a &#x60;type&#x60; (a JSON string) and a &#x60;value&#x60; (whose type depends on the &#x60;type&#x60;   property). The different available scopes are described elsewhere. Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body  (required)
     * @param limit Limit the number of registrations to be retrieved. (optional)
     * @param offset Skip a number of registrations. (optional)
     * @param options Options dictionary. (optional)
     * @return ApiResponse&lt;List&lt;Registration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Registration>> createDiscoverWithHttpInfo(Discoverrequest body, Double limit, Double offset, String options) throws ApiException {
        com.squareup.okhttp.Call call = createDiscoverCall(body, limit, offset, options, null, null);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The response payload is an Array that contains one object per matching registration. The registrations follow the JSON registration representation format (described in a section above). The payload may contain the following elements (all of them optional): + &#x60;entities&#x60;: a list of entites to search for. Each entity is represented by a JSON object with the   following elements:     + &#x60;id&#x60; or &#x60;idPattern&#x60;: Id or pattern of the affected entities. Both cannot be used at the same       time, but at least one of them must be present.     + &#x60;type&#x60; or &#x60;typePattern&#x60;: Type or type pattern of the entities to search for. Both cannot be used at       the same time. If omitted, it means \&quot;any entity type\&quot;. + &#x60;attributes&#x60;: a list of attribute names to search for. If omitted, it means \&quot;all attributes\&quot;. + &#x60;scopes&#x60;: a list of scopes to restrict the results of the query. Each scope is represented by a   JSON object with a &#x60;type&#x60; (a JSON string) and a &#x60;value&#x60; (whose type depends on the &#x60;type&#x60;   property). The different available scopes are described elsewhere. Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body  (required)
     * @param limit Limit the number of registrations to be retrieved. (optional)
     * @param offset Skip a number of registrations. (optional)
     * @param options Options dictionary. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDiscoverAsync(Discoverrequest body, Double limit, Double offset, String options, final ApiCallback<List<Registration>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDiscoverCall(body, limit, offset, options, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createQuery */
    private com.squareup.okhttp.Call createQueryCall(Queryrequest body, Double limit, Double offset, String orderBy, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createQuery(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/op/query".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "orderBy", orderBy));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "options", options));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * The response payload is an Array containing one object per matching entity, or an empty array &#x60;[]&#x60; if  no entities are found. The entities follow the JSON entity representation format (described in the section \&quot;JSON Entity Representation\&quot;). The payload may contain the following elements (all of them optional): + &#x60;entities&#x60;: a list of entites to search for. Each element is represented by a JSON object with the   following elements:     + &#x60;id&#x60; or &#x60;idPattern&#x60;: Id or pattern of the affected entities. Both cannot be used at the same       time, but at least one of them must be present.     + &#x60;type&#x60; or &#x60;typePattern&#x60;: Type or type pattern of the entities to search for. Both cannot be used at       the same time. If omitted, it means \&quot;any entity type\&quot;. + &#x60;attributes&#x60;: a list of attribute names to search for. If omitted, it means \&quot;all attributes\&quot;. + &#x60;scopes&#x60;: a list of scopes to restrict the result of the query. Each scope is represented by a    JSON object with a &#x60;type&#x60; (a JSON string) and &#x60;value&#x60; (whose type depends on the &#x60;type&#x60;    property).    The different available scopes are described elsewhere. Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body  (required)
     * @param limit Limit the number of entities to be retrieved. (optional)
     * @param offset Skip a number of records. (optional)
     * @param orderBy Criteria for ordering results. See \&quot;Ordering Results\&quot; section for details. (optional)
     * @param options Options dictionary (optional)
     * @return List&lt;Queryresponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Queryresponse> createQuery(Queryrequest body, Double limit, Double offset, String orderBy, String options) throws ApiException {
        ApiResponse<List<Queryresponse>> resp = createQueryWithHttpInfo(body, limit, offset, orderBy, options);
        return resp.getData();
    }

    /**
     * 
     * The response payload is an Array containing one object per matching entity, or an empty array &#x60;[]&#x60; if  no entities are found. The entities follow the JSON entity representation format (described in the section \&quot;JSON Entity Representation\&quot;). The payload may contain the following elements (all of them optional): + &#x60;entities&#x60;: a list of entites to search for. Each element is represented by a JSON object with the   following elements:     + &#x60;id&#x60; or &#x60;idPattern&#x60;: Id or pattern of the affected entities. Both cannot be used at the same       time, but at least one of them must be present.     + &#x60;type&#x60; or &#x60;typePattern&#x60;: Type or type pattern of the entities to search for. Both cannot be used at       the same time. If omitted, it means \&quot;any entity type\&quot;. + &#x60;attributes&#x60;: a list of attribute names to search for. If omitted, it means \&quot;all attributes\&quot;. + &#x60;scopes&#x60;: a list of scopes to restrict the result of the query. Each scope is represented by a    JSON object with a &#x60;type&#x60; (a JSON string) and &#x60;value&#x60; (whose type depends on the &#x60;type&#x60;    property).    The different available scopes are described elsewhere. Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body  (required)
     * @param limit Limit the number of entities to be retrieved. (optional)
     * @param offset Skip a number of records. (optional)
     * @param orderBy Criteria for ordering results. See \&quot;Ordering Results\&quot; section for details. (optional)
     * @param options Options dictionary (optional)
     * @return ApiResponse&lt;List&lt;Queryresponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Queryresponse>> createQueryWithHttpInfo(Queryrequest body, Double limit, Double offset, String orderBy, String options) throws ApiException {
        com.squareup.okhttp.Call call = createQueryCall(body, limit, offset, orderBy, options, null, null);
        Type localVarReturnType = new TypeToken<List<Queryresponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The response payload is an Array containing one object per matching entity, or an empty array &#x60;[]&#x60; if  no entities are found. The entities follow the JSON entity representation format (described in the section \&quot;JSON Entity Representation\&quot;). The payload may contain the following elements (all of them optional): + &#x60;entities&#x60;: a list of entites to search for. Each element is represented by a JSON object with the   following elements:     + &#x60;id&#x60; or &#x60;idPattern&#x60;: Id or pattern of the affected entities. Both cannot be used at the same       time, but at least one of them must be present.     + &#x60;type&#x60; or &#x60;typePattern&#x60;: Type or type pattern of the entities to search for. Both cannot be used at       the same time. If omitted, it means \&quot;any entity type\&quot;. + &#x60;attributes&#x60;: a list of attribute names to search for. If omitted, it means \&quot;all attributes\&quot;. + &#x60;scopes&#x60;: a list of scopes to restrict the result of the query. Each scope is represented by a    JSON object with a &#x60;type&#x60; (a JSON string) and &#x60;value&#x60; (whose type depends on the &#x60;type&#x60;    property).    The different available scopes are described elsewhere. Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body  (required)
     * @param limit Limit the number of entities to be retrieved. (optional)
     * @param offset Skip a number of records. (optional)
     * @param orderBy Criteria for ordering results. See \&quot;Ordering Results\&quot; section for details. (optional)
     * @param options Options dictionary (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createQueryAsync(Queryrequest body, Double limit, Double offset, String orderBy, String options, final ApiCallback<List<Queryresponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createQueryCall(body, limit, offset, orderBy, options, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Queryresponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createRegister */
    private com.squareup.okhttp.Call createRegisterCall(Registerrequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRegister(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/op/register".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This operation allows to create, update and/or delete several registrations in a single batch operation. The payload is an object with two properties: + &#x60;actionType&#x60;, to specify the kind of register action to do: either CREATE, UPDATE, or DELETE. + &#x60;registrations&#x60;, an array of registrations, each one specified using the JSON registration    representation format (described above). In the case of CREATE operation, the registration &#x60;id&#x60;   must not be included. Response: * Successful operation uses 200 OK. In addition, in the case of successful CREATE, a list of IDs is   returned, each one corresponding to the ID of the element in the request payload and in that same   order. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> createRegister(Registerrequest body) throws ApiException {
        ApiResponse<List<String>> resp = createRegisterWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * This operation allows to create, update and/or delete several registrations in a single batch operation. The payload is an object with two properties: + &#x60;actionType&#x60;, to specify the kind of register action to do: either CREATE, UPDATE, or DELETE. + &#x60;registrations&#x60;, an array of registrations, each one specified using the JSON registration    representation format (described above). In the case of CREATE operation, the registration &#x60;id&#x60;   must not be included. Response: * Successful operation uses 200 OK. In addition, in the case of successful CREATE, a list of IDs is   returned, each one corresponding to the ID of the element in the request payload and in that same   order. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> createRegisterWithHttpInfo(Registerrequest body) throws ApiException {
        com.squareup.okhttp.Call call = createRegisterCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation allows to create, update and/or delete several registrations in a single batch operation. The payload is an object with two properties: + &#x60;actionType&#x60;, to specify the kind of register action to do: either CREATE, UPDATE, or DELETE. + &#x60;registrations&#x60;, an array of registrations, each one specified using the JSON registration    representation format (described above). In the case of CREATE operation, the registration &#x60;id&#x60;   must not be included. Response: * Successful operation uses 200 OK. In addition, in the case of successful CREATE, a list of IDs is   returned, each one corresponding to the ID of the element in the request payload and in that same   order. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRegisterAsync(Registerrequest body, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRegisterCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for update */
    private com.squareup.okhttp.Call updateCall(UpdateRequest body, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling update(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/op/update".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "options", options));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This operation allows to create, update and/or delete several entities in a single batch operation. The payload is an object with two properties: + &#x60;actionType&#x60;, to specify the kind of update action to do: either APPEND, APPEND_STRICT, UPDATE,   DELETE. + &#x60;entities&#x60;, an array of entities, each one specified using the JSON entity representation format   (described in the section \&quot;JSON Entity Representation\&quot;). Response: * Successful operation uses 204 No Content. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body  (required)
     * @param options Options dictionary (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void update(UpdateRequest body, String options) throws ApiException {
        updateWithHttpInfo(body, options);
    }

    /**
     * 
     * This operation allows to create, update and/or delete several entities in a single batch operation. The payload is an object with two properties: + &#x60;actionType&#x60;, to specify the kind of update action to do: either APPEND, APPEND_STRICT, UPDATE,   DELETE. + &#x60;entities&#x60;, an array of entities, each one specified using the JSON entity representation format   (described in the section \&quot;JSON Entity Representation\&quot;). Response: * Successful operation uses 204 No Content. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body  (required)
     * @param options Options dictionary (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateWithHttpInfo(UpdateRequest body, String options) throws ApiException {
        com.squareup.okhttp.Call call = updateCall(body, options, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * This operation allows to create, update and/or delete several entities in a single batch operation. The payload is an object with two properties: + &#x60;actionType&#x60;, to specify the kind of update action to do: either APPEND, APPEND_STRICT, UPDATE,   DELETE. + &#x60;entities&#x60;, an array of entities, each one specified using the JSON entity representation format   (described in the section \&quot;JSON Entity Representation\&quot;). Response: * Successful operation uses 204 No Content. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body  (required)
     * @param options Options dictionary (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAsync(UpdateRequest body, String options, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCall(body, options, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
