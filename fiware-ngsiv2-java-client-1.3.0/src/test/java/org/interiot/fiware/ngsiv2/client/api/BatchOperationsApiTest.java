/*
 * FIWARE-NGSI v2 Specification
 * FIWARE-NGSI v2 Specification
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.interiot.fiware.ngsiv2.client.api;

import org.interiot.fiware.ngsiv2.client.ApiException;
import org.interiot.fiware.ngsiv2.client.model.Discoverrequest;
import org.interiot.fiware.ngsiv2.client.model.Registration;
import org.interiot.fiware.ngsiv2.client.model.Queryrequest;
import org.interiot.fiware.ngsiv2.client.model.Queryresponse;
import org.interiot.fiware.ngsiv2.client.model.Registerrequest;
import org.interiot.fiware.ngsiv2.client.model.UpdateRequest;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BatchOperationsApi
 */
public class BatchOperationsApiTest {

    private final BatchOperationsApi api = new BatchOperationsApi();

    
    /**
     * 
     *
     * The response payload is an Array that contains one object per matching registration. The registrations follow the JSON registration representation format (described in a section above). The payload may contain the following elements (all of them optional): + &#x60;entities&#x60;: a list of entites to search for. Each entity is represented by a JSON object with the   following elements:     + &#x60;id&#x60; or &#x60;idPattern&#x60;: Id or pattern of the affected entities. Both cannot be used at the same       time, but at least one of them must be present.     + &#x60;type&#x60; or &#x60;typePattern&#x60;: Type or type pattern of the entities to search for. Both cannot be used at       the same time. If omitted, it means \&quot;any entity type\&quot;. + &#x60;attributes&#x60;: a list of attribute names to search for. If omitted, it means \&quot;all attributes\&quot;. + &#x60;scopes&#x60;: a list of scopes to restrict the results of the query. Each scope is represented by a   JSON object with a &#x60;type&#x60; (a JSON string) and a &#x60;value&#x60; (whose type depends on the &#x60;type&#x60;   property). The different available scopes are described elsewhere. Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDiscoverTest() throws ApiException {
        Discoverrequest body = null;
        Double limit = null;
        Double offset = null;
        String options = null;
        // List<Registration> response = api.createDiscover(body, limit, offset, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The response payload is an Array containing one object per matching entity, or an empty array &#x60;[]&#x60; if  no entities are found. The entities follow the JSON entity representation format (described in the section \&quot;JSON Entity Representation\&quot;). The payload may contain the following elements (all of them optional): + &#x60;entities&#x60;: a list of entites to search for. Each element is represented by a JSON object with the   following elements:     + &#x60;id&#x60; or &#x60;idPattern&#x60;: Id or pattern of the affected entities. Both cannot be used at the same       time, but at least one of them must be present.     + &#x60;type&#x60; or &#x60;typePattern&#x60;: Type or type pattern of the entities to search for. Both cannot be used at       the same time. If omitted, it means \&quot;any entity type\&quot;. + &#x60;attributes&#x60;: a list of attribute names to search for. If omitted, it means \&quot;all attributes\&quot;. + &#x60;scopes&#x60;: a list of scopes to restrict the result of the query. Each scope is represented by a    JSON object with a &#x60;type&#x60; (a JSON string) and &#x60;value&#x60; (whose type depends on the &#x60;type&#x60;    property).    The different available scopes are described elsewhere. Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createQueryTest() throws ApiException {
        Queryrequest body = null;
        Double limit = null;
        Double offset = null;
        String orderBy = null;
        String options = null;
        // List<Queryresponse> response = api.createQuery(body, limit, offset, orderBy, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This operation allows to create, update and/or delete several registrations in a single batch operation. The payload is an object with two properties: + &#x60;actionType&#x60;, to specify the kind of register action to do: either CREATE, UPDATE, or DELETE. + &#x60;registrations&#x60;, an array of registrations, each one specified using the JSON registration    representation format (described above). In the case of CREATE operation, the registration &#x60;id&#x60;   must not be included. Response: * Successful operation uses 200 OK. In addition, in the case of successful CREATE, a list of IDs is   returned, each one corresponding to the ID of the element in the request payload and in that same   order. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRegisterTest() throws ApiException {
        Registerrequest body = null;
        // List<String> response = api.createRegister(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This operation allows to create, update and/or delete several entities in a single batch operation. The payload is an object with two properties: + &#x60;actionType&#x60;, to specify the kind of update action to do: either APPEND, APPEND_STRICT, UPDATE,   DELETE. + &#x60;entities&#x60;, an array of entities, each one specified using the JSON entity representation format   (described in the section \&quot;JSON Entity Representation\&quot;). Response: * Successful operation uses 204 No Content. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        UpdateRequest body = null;
        String options = null;
        // api.update(body, options);

        // TODO: test validations
    }
    
}
