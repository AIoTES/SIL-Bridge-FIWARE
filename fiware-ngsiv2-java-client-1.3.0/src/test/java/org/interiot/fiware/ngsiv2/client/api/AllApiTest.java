/*
 * FIWARE-NGSI v2 Specification
 * FIWARE-NGSI v2 Specification
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.interiot.fiware.ngsiv2.client.api;

import org.interiot.fiware.ngsiv2.client.ApiException;
import org.interiot.fiware.ngsiv2.client.model.Registration;
import org.interiot.fiware.ngsiv2.client.model.Subscription;
import org.interiot.fiware.ngsiv2.client.model.Discoverrequest;
import org.interiot.fiware.ngsiv2.client.model.Entity;
import org.interiot.fiware.ngsiv2.client.model.Queryrequest;
import org.interiot.fiware.ngsiv2.client.model.Queryresponse;
import org.interiot.fiware.ngsiv2.client.model.Registerrequest;
import org.interiot.fiware.ngsiv2.client.model.Attributes;
import org.interiot.fiware.ngsiv2.client.model.Resources;
import org.interiot.fiware.ngsiv2.client.model.EntityType;
import org.interiot.fiware.ngsiv2.client.model.UpdateRequest;
import org.interiot.fiware.ngsiv2.client.model.Attribute;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AllApi
 */
public class AllApiTest {

    private final AllApi api = new AllApi();

    
    /**
     * 
     *
     * Creates a new registration. This is typically used for associating context providers to certain data. The registration is represented by a JSON object as described at the beginning of this section. Response: * Successful operation uses 201 Created * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createANewContextProviderRegistrationTest() throws ApiException {
        Registration body = null;
        // api.createANewContextProviderRegistration(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creates a new subscription. The subscription is represented by a JSON object as described at the beginning of this section. Response: * Successful operation uses 201 Created * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createANewSubscriptionTest() throws ApiException {
        Subscription body = null;
        // api.createANewSubscription(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The response payload is an Array that contains one object per matching registration. The registrations follow the JSON registration representation format (described in a section above). The payload may contain the following elements (all of them optional): + &#x60;entities&#x60;: a list of entites to search for. Each entity is represented by a JSON object with the   following elements:     + &#x60;id&#x60; or &#x60;idPattern&#x60;: Id or pattern of the affected entities. Both cannot be used at the same       time, but at least one of them must be present.     + &#x60;type&#x60; or &#x60;typePattern&#x60;: Type or type pattern of the entities to search for. Both cannot be used at       the same time. If omitted, it means \&quot;any entity type\&quot;. + &#x60;attributes&#x60;: a list of attribute names to search for. If omitted, it means \&quot;all attributes\&quot;. + &#x60;scopes&#x60;: a list of scopes to restrict the results of the query. Each scope is represented by a   JSON object with a &#x60;type&#x60; (a JSON string) and a &#x60;value&#x60; (whose type depends on the &#x60;type&#x60;   property). The different available scopes are described elsewhere. Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDiscoverTest() throws ApiException {
        Discoverrequest body = null;
        Double limit = null;
        Double offset = null;
        String options = null;
        // List<Registration> response = api.createDiscover(body, limit, offset, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The payload is an object representing the entity to be created. The object follows the JSON entity representation format (described in a \&quot;JSON Entity Representation\&quot; section). Response: * Successful operation uses 201 Created. Reponse includes a &#x60;Location&#x60; header with the URL of the   created entity. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEntityTest() throws ApiException {
        Entity body = null;
        String options = null;
        // api.createEntity(body, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * (The payload of the v2 notifyContext should be described)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotifyContextTest() throws ApiException {
        // api.createNotifyContext();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * (The payload of the v2 notifyContextAvailability should be described)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotifyContextAvailabilityTest() throws ApiException {
        // api.createNotifyContextAvailability();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The response payload is an Array containing one object per matching entity, or an empty array &#x60;[]&#x60; if  no entities are found. The entities follow the JSON entity representation format (described in the section \&quot;JSON Entity Representation\&quot;). The payload may contain the following elements (all of them optional): + &#x60;entities&#x60;: a list of entites to search for. Each element is represented by a JSON object with the   following elements:     + &#x60;id&#x60; or &#x60;idPattern&#x60;: Id or pattern of the affected entities. Both cannot be used at the same       time, but at least one of them must be present.     + &#x60;type&#x60; or &#x60;typePattern&#x60;: Type or type pattern of the entities to search for. Both cannot be used at       the same time. If omitted, it means \&quot;any entity type\&quot;. + &#x60;attributes&#x60;: a list of attribute names to search for. If omitted, it means \&quot;all attributes\&quot;. + &#x60;scopes&#x60;: a list of scopes to restrict the result of the query. Each scope is represented by a    JSON object with a &#x60;type&#x60; (a JSON string) and &#x60;value&#x60; (whose type depends on the &#x60;type&#x60;    property).    The different available scopes are described elsewhere. Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createQueryTest() throws ApiException {
        Queryrequest body = null;
        Double limit = null;
        Double offset = null;
        String orderBy = null;
        String options = null;
        // List<Queryresponse> response = api.createQuery(body, limit, offset, orderBy, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This operation allows to create, update and/or delete several registrations in a single batch operation. The payload is an object with two properties: + &#x60;actionType&#x60;, to specify the kind of register action to do: either CREATE, UPDATE, or DELETE. + &#x60;registrations&#x60;, an array of registrations, each one specified using the JSON registration    representation format (described above). In the case of CREATE operation, the registration &#x60;id&#x60;   must not be included. Response: * Successful operation uses 200 OK. In addition, in the case of successful CREATE, a list of IDs is   returned, each one corresponding to the ID of the element in the request payload and in that same   order. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRegisterTest() throws ApiException {
        Registerrequest body = null;
        // List<String> response = api.createRegister(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * (Not needed, as it is covered by the RESTful POST /v2/subscriptions operation)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubscribeContextTest() throws ApiException {
        // api.createSubscribeContext();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * (Not needed as POJ RPC, but we need to define a RESTful operation for this, analogous to the NGSI10 one)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubscribeContextAvailabilityTest() throws ApiException {
        // api.createSubscribeContextAvailability();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * (Not needed, as it is covered by the RESTful DELETE /v2/subscriptions operation)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUnsubscribeContextTest() throws ApiException {
        // api.createUnsubscribeContext();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * (Not needed as POJ RPC, but we need to define a RESTful operation for this, analogous to the NGSI10 one)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUnsubscribeContextAvailabilityTest() throws ApiException {
        // api.createUnsubscribeContextAvailability();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cancels registration. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContextProviderRegistrationTest() throws ApiException {
        String registrationId = null;
        // api.deleteContextProviderRegistration(registrationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cancels subscription. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubscriptionTest() throws ApiException {
        String subscriptionId = null;
        // api.deleteSubscription(subscriptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 20O OK. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttributeDataTest() throws ApiException {
        String entityId = null;
        String attrName = null;
        String type = null;
        // Attributes response = api.getAttributeData(entityId, attrName, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This operation returns the &#x60;value&#x60; property with the value of the attribute. * If attribute value is JSON Array or Object:   * If &#x60;Accept&#x60; header can be expanded to &#x60;application/json&#x60; or &#x60;text/plain&#x60; return the value as a JSON with a     response type of application/json or text/plain (whichever is the first in &#x60;Accept&#x60; header or     &#x60;application/json&#x60; in the case of &#x60;Accept: *_/_*&#x60;).   * Else return a HTTP error \&quot;406 Not Acceptable: accepted MIME types: application/json, text/plain\&quot; * If attribute value is a string, number, null or boolean:   * If &#x60;Accept&#x60; header can be expanded to text/plain return the value as text. In case of a string, citation     marks are used at the begining and end.   * Else return a HTTP error \&quot;406 Not Acceptable: accepted MIME types: text/plain\&quot; Response: * Successful operation uses 20O OK. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttributeValueTest() throws ApiException {
        String entityId = null;
        String attrName = null;
        String type = null;
        // api.getAttributeValue(entityId, attrName, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves a list of entities that match different criteria by id, type, pattern matching (either id or type) and/or those which match a query or geographical query. A given entity has to match all the criteria to be retrieved (i.e., the criteria is combined in a logical AND way). Note that pattern matching query parameters are incompatible (i.e. mutually exclusive) with their corresponding exact matching parameters, i.e. &#x60;idPattern&#x60; with &#x60;id&#x60; and &#x60;typePattern&#x60; with &#x60;type&#x60;. The response payload is an array containing one object per matching entity. Each entity follows the JSON entity representation format (described in \&quot;JSON Entity Representation\&quot; section). Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEntitiesTest() throws ApiException {
        String id = null;
        String type = null;
        String idPattern = null;
        String typePattern = null;
        String q = null;
        String mq = null;
        String georel = null;
        String geometry = null;
        String coords = null;
        Double limit = null;
        Double offset = null;
        String attrs = null;
        String orderBy = null;
        String options = null;
        // List<Entity> response = api.listEntities(id, type, idPattern, typePattern, q, mq, georel, geometry, coords, limit, offset, attrs, orderBy, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeASingleAttributeTest() throws ApiException {
        String entityId = null;
        String attrName = null;
        String type = null;
        // api.removeASingleAttribute(entityId, attrName, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the entity. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeEntityTest() throws ApiException {
        String entityId = null;
        String type = null;
        // api.removeEntity(entityId, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommended to follow the “url” link values, [Link](https://tools.ietf.org/html/rfc5988) or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAPIResourcesTest() throws ApiException {
        // Resources response = api.retrieveAPIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The response is the registration represented by a JSON object as described at the beginning of this section. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveContextProviderRegistrationTest() throws ApiException {
        String registrationId = null;
        // Registration response = api.retrieveContextProviderRegistration(registrationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The response is an object representing the entity identified by the ID. The object follows the JSON entity representation format (described in \&quot;JSON Entity Representation\&quot; section). This operation must return one entity element only, but there may be more than one entity with the same ID (e.g. entities with same ID but different types). In such case, an error message is returned, with the HTTP status code set to 409 Conflict.  Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveEntityTest() throws ApiException {
        String entityId = null;
        String type = null;
        String attrs = null;
        String options = null;
        // Entity response = api.retrieveEntity(entityId, type, attrs, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This request is similar to retreiving the whole entity, however this one omits the &#x60;id&#x60; and &#x60;type&#x60; fields. Just like the general request of getting an entire entity, this operation must return only one entity element. If more than one entity with the same ID is found (e.g. entities with same ID but different type), an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveEntityAttributesTest() throws ApiException {
        String entityId = null;
        String type = null;
        String attrs = null;
        String options = null;
        // Attributes response = api.retrieveEntityAttributes(entityId, type, attrs, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This operation returns a JSON object with information about the type: * &#x60;attrs&#x60; : the set of attribute names along with all the entities of such type, represented in   a JSON object whose keys are the attribute names and whose values contain information of such   attributes (in particular a list of the types used by attributes with that name along with all the   entities). * &#x60;count&#x60; : the number of entities belonging to that type. Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveEntityTypeTest() throws ApiException {
        String entityType = null;
        // EntityType response = api.retrieveEntityType(entityType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * If the &#x60;values&#x60; option is not in use, this operation returns a JSON array with the entity types. Each element is a JSON object with information about the type: * &#x60;type&#x60; : the entity type name. * &#x60;attrs&#x60; : the set of attribute names along with all the entities of such type, represented in   a JSON object whose keys are the attribute names and whose values contain information of such   attributes (in particular a list of the types used by attributes with that name along with all the   entities). * &#x60;count&#x60; : the number of entities belonging to that type. If the &#x60;values&#x60; option is used, the operation returns a JSON array with a list of entity type names as strings. Results are ordered by entity &#x60;type&#x60; in alphabetical order. Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveEntityTypesTest() throws ApiException {
        Double limit = null;
        Double offset = null;
        String options = null;
        // List<EntityType> response = api.retrieveEntityTypes(limit, offset, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all the registrations present in the system. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveRegistrationsTest() throws ApiException {
        // List<Registration> response = api.retrieveRegistrations();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The response is the subscription represented by a JSON object as described at the beginning of this section. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveSubscriptionTest() throws ApiException {
        String subscriptionId = null;
        // Subscription response = api.retrieveSubscription(subscriptionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of all the subscriptions present in the system. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveSubscriptionsTest() throws ApiException {
        Double limit = null;
        Double offset = null;
        String options = null;
        // List<Subscription> response = api.retrieveSubscriptions(limit, offset, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This operation allows to create, update and/or delete several entities in a single batch operation. The payload is an object with two properties: + &#x60;actionType&#x60;, to specify the kind of update action to do: either APPEND, APPEND_STRICT, UPDATE,   DELETE. + &#x60;entities&#x60;, an array of entities, each one specified using the JSON entity representation format   (described in the section \&quot;JSON Entity Representation\&quot;). Response: * Successful operation uses 204 No Content. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        UpdateRequest body = null;
        String options = null;
        // api.update(body, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The request payload is an object representing the new attribute data. Previous attribute data is replaced by the one in the request. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAttributeDataTest() throws ApiException {
        String entityId = null;
        String attrName = null;
        Attribute body = null;
        String type = null;
        // api.updateAttributeData(entityId, attrName, body, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * (Not needed as POJ RPC, but we need to define a RESTful operation for this, analogous to the NGSI10 one)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextAvailabilitySubscriptionTest() throws ApiException {
        // api.updateContextAvailabilitySubscription();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * (Not needed, as it is covered by the RESTful PATCH /v2/subscriptions operation)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContextSubscriptionTest() throws ApiException {
        // api.updateContextSubscription();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The request payload is an object representing the attributes to append or update. The object follows the JSON entity representation format (described in \&quot;JSON Entity Representation\&quot; section), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The entity attributes are updated with the ones in the payload, depending on whether the &#x60;append&#x60; operation option is used or not. * If &#x60;append&#x60; is not used: the entity attributes are updated (if they previously exist) or appended   (if they don&#39;t previously exist) with the ones in the payload. * If &#x60;append&#x60; is used (i.e. strict append semantics): all the attributes in the payload not   previously existing in the entity are appended. In addition to that, in case some of the   attributes in the payload already exist in the entity, an error is returned. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrAppendEntityAttributesTest() throws ApiException {
        String entityId = null;
        Attributes body = null;
        String type = null;
        String options = null;
        // api.updateOrAppendEntityAttributes(entityId, body, type, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The request payload is an object representing the new entity attributes. The object follows the JSON entity representation format (described in a \&quot;JSON Entity Representation\&quot; above), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The attributes previously existing in the entity are removed and replaced by the ones in the request. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateReplaceAllEntityAttributesTest() throws ApiException {
        String entityId = null;
        Attributes body = null;
        String type = null;
        String options = null;
        // api.updateReplaceAllEntityAttributes(entityId, body, type, options);

        // TODO: test validations
    }
    
}
