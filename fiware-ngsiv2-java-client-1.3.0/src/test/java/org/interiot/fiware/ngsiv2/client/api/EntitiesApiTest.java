/*
 * FIWARE-NGSI v2 Specification
 * FIWARE-NGSI v2 Specification
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.interiot.fiware.ngsiv2.client.api;

import org.interiot.fiware.ngsiv2.client.ApiException;
import org.interiot.fiware.ngsiv2.client.model.Entity;
import org.interiot.fiware.ngsiv2.client.model.Attributes;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EntitiesApi
 */
public class EntitiesApiTest {

    private final EntitiesApi api = new EntitiesApi();

    
    /**
     * 
     *
     * The payload is an object representing the entity to be created. The object follows the JSON entity representation format (described in a \&quot;JSON Entity Representation\&quot; section). Response: * Successful operation uses 201 Created. Reponse includes a &#x60;Location&#x60; header with the URL of the   created entity. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEntityTest() throws ApiException {
        Entity body = null;
        String options = null;
        // api.createEntity(body, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves a list of entities that match different criteria by id, type, pattern matching (either id or type) and/or those which match a query or geographical query. A given entity has to match all the criteria to be retrieved (i.e., the criteria is combined in a logical AND way). Note that pattern matching query parameters are incompatible (i.e. mutually exclusive) with their corresponding exact matching parameters, i.e. &#x60;idPattern&#x60; with &#x60;id&#x60; and &#x60;typePattern&#x60; with &#x60;type&#x60;. The response payload is an array containing one object per matching entity. Each entity follows the JSON entity representation format (described in \&quot;JSON Entity Representation\&quot; section). Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEntitiesTest() throws ApiException {
        String id = null;
        String type = null;
        String idPattern = null;
        String typePattern = null;
        String q = null;
        String mq = null;
        String georel = null;
        String geometry = null;
        String coords = null;
        Double limit = null;
        Double offset = null;
        String attrs = null;
        String orderBy = null;
        String options = null;
        // List<Entity> response = api.listEntities(id, type, idPattern, typePattern, q, mq, georel, geometry, coords, limit, offset, attrs, orderBy, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the entity. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeEntityTest() throws ApiException {
        String entityId = null;
        String type = null;
        // api.removeEntity(entityId, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The response is an object representing the entity identified by the ID. The object follows the JSON entity representation format (described in \&quot;JSON Entity Representation\&quot; section). This operation must return one entity element only, but there may be more than one entity with the same ID (e.g. entities with same ID but different types). In such case, an error message is returned, with the HTTP status code set to 409 Conflict.  Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveEntityTest() throws ApiException {
        String entityId = null;
        String type = null;
        String attrs = null;
        String options = null;
        // Entity response = api.retrieveEntity(entityId, type, attrs, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This request is similar to retreiving the whole entity, however this one omits the &#x60;id&#x60; and &#x60;type&#x60; fields. Just like the general request of getting an entire entity, this operation must return only one entity element. If more than one entity with the same ID is found (e.g. entities with same ID but different type), an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveEntityAttributesTest() throws ApiException {
        String entityId = null;
        String type = null;
        String attrs = null;
        String options = null;
        // Attributes response = api.retrieveEntityAttributes(entityId, type, attrs, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The request payload is an object representing the attributes to append or update. The object follows the JSON entity representation format (described in \&quot;JSON Entity Representation\&quot; section), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The entity attributes are updated with the ones in the payload, depending on whether the &#x60;append&#x60; operation option is used or not. * If &#x60;append&#x60; is not used: the entity attributes are updated (if they previously exist) or appended   (if they don&#39;t previously exist) with the ones in the payload. * If &#x60;append&#x60; is used (i.e. strict append semantics): all the attributes in the payload not   previously existing in the entity are appended. In addition to that, in case some of the   attributes in the payload already exist in the entity, an error is returned. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrAppendEntityAttributesTest() throws ApiException {
        String entityId = null;
        Attributes body = null;
        String type = null;
        String options = null;
        // api.updateOrAppendEntityAttributes(entityId, body, type, options);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The request payload is an object representing the new entity attributes. The object follows the JSON entity representation format (described in a \&quot;JSON Entity Representation\&quot; above), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The attributes previously existing in the entity are removed and replaced by the ones in the request. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateReplaceAllEntityAttributesTest() throws ApiException {
        String entityId = null;
        Attributes body = null;
        String type = null;
        String options = null;
        // api.updateReplaceAllEntityAttributes(entityId, body, type, options);

        // TODO: test validations
    }
    
}
